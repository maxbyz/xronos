/* 
 * XRONOS, High Level Synthesis of Streaming Applications
 * 
 * Copyright (C) 2014 EPFL SCI STI MM
 *
 * This file is part of XRONOS.
 *
 * XRONOS is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * XRONOS is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with XRONOS.  If not, see <http://www.gnu.org/licenses/>.
 * 
 * Additional permission under GNU GPL version 3 section 7
 * 
 * If you modify this Program, or any covered work, by linking or 
 * combining it with Eclipse libraries (or a modified version of that 
 * library), containing parts covered by the terms of EPL,
 * the licensors of this Program grant you additional permission to convey 
 * the resulting work. {Corresponding Source for a non-source form of such 
 * a combination shall include the source code for the parts of Eclipse 
 * libraries used as well as that of the  covered work.}
 */

package org.xronos.orcc.backend;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;

import net.sf.orcc.df.Action;
import net.sf.orcc.df.Actor;

/**
 * This class takes a Verilog file generated by OpenForge and adds the Go and
 * done signal for each action in the Top instance module
 * 
 * @author Endri Bezati
 * 
 */
public class VerilogAddGoDone {

	Actor actor;

	String srcPath;

	String tgtPath;

	public VerilogAddGoDone(Actor actor, String srcPath, String tgtPath) {
		this.actor = actor;
		this.srcPath = srcPath;
		this.tgtPath = tgtPath;
	}

	public void addGoDone() {
		File newVerilogFile = new File(tgtPath + File.separator
				+ actor.getSimpleName() + ".v");
		try {
			// Old Verilog Instance without Go and Done
			String oVerilogFile = srcPath + File.separator
					+ actor.getSimpleName() + ".v";
			FileInputStream iStream = new FileInputStream(oVerilogFile);

			BufferedReader iBuffer = new BufferedReader(new InputStreamReader(
					iStream));

			// New Verilog Instance with Go and Done
			FileOutputStream oStream = new FileOutputStream(newVerilogFile);
			PrintWriter verilogWriter = new PrintWriter(oStream);

			// Pass by the Header comments
			Boolean finish = true;
			while (finish) {
				while (iBuffer.ready()) {
					String line = iBuffer.readLine();
					if (line.equals("")) {
						verilogWriter.println(line);
						finish = false;
						break;
					} else {
						verilogWriter.println(line);
					}
				}
			}

			// Read each character in until ")" of the module
			while (iBuffer.ready()) {
				char tmp = (char) iBuffer.read();
				if (tmp == ')') {
					iBuffer.mark(10);
					break;
				} else {
					verilogWriter.print(tmp);
				}
			}
			// Add for each action into to the Top module the name of the action
			// with _go and _done
			for (Action action : actor.getActions()) {
				verilogWriter.print(", " + action.getName() + "_go, "
						+ action.getName() + "_done");
			}

			// Close bracket and new line
			verilogWriter.println(");");

			// Print go and done of each action for input declaration
			for (Action action : actor.getActions()) {
				verilogWriter.print("output\t\t" + action.getName() + "_go;\n");
				verilogWriter.print("output\t\t" + action.getName()
						+ "_done;\n");
			}

			int skip = 1;
			String contains;
			iBuffer.reset();
			boolean stop = false;
			while (iBuffer.ready()) {
				if (skip == 1) {
					iBuffer.readLine();
					skip = 2;
				}
				iBuffer.mark(100);
				contains = iBuffer.readLine();
				// Find <actionName>_go and <actionName>_done in the assign on
				// the Top Module

				if (contains.indexOf("endmodule") != -1) {
					stop = true;
				}
				if ((contains.indexOf("assign") != -1) && !stop) {
					for (Action action : actor.getActions()) {

						String actionNameGo = action.getName() + "_go";
						String actionNameDone = action.getName() + "_done";
						if (contains.indexOf("assign " + actionNameGo + "=") != -1) {
							int loc = contains.indexOf(actionNameGo);
							String newLine = "assign "
									+ contains
											.substring(loc, contains.length());
							verilogWriter.println(newLine);
						}
						if (contains.indexOf("assign " + actionNameDone + "=") != -1) {
							int loc = contains.indexOf(actionNameDone);
							String newLine = "assign "
									+ contains
											.substring(loc, contains.length());
							verilogWriter.println(newLine);
						}
					}
					verilogWriter.println(contains);

				} else {
					verilogWriter.println(contains);
				}
			}

			// Flush, close and write
			verilogWriter.flush();
			verilogWriter.close();
			iBuffer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
